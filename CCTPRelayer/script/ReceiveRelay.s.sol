pragma solidity ^0.8.20;

import "./BaseScript.sol";

import {ERC1967Proxy} from "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import {CCTPRelayer} from "src/CCTPRelayer.sol";
import {IMessageTransmitter} from "src/interfaces/IMessageTransmitter.sol";
import {IERC20} from "openzeppelin-contracts/token/ERC20/IERC20.sol";
import {ICCTPRelayer} from "src/interfaces/ICCTPRelayer.sol";

contract DeploymentScript is BaseScript {
    function run() public {
        vm.startBroadcast();

        // run cctpscript/main.go to get the values

        CCTPRelayer relayer = CCTPRelayer(payable(0xDc2f6bfEBc730B71aA19fccD5990194B40FBCeb6));

        bytes memory transferMessage =
            hex"000000000000000100000003000000000001fc690000000000000000000000006b25532e1060ce10cc3b0a99e5683b91bfde698200000000000000000000000019330d10d9cc8751218eaf51e8885d058642e08a000000000000000000000000dc2f6bfebc730b71aa19fccd5990194b40fbceb600000000000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000dc2f6bfebc730b71aa19fccd5990194b40fbceb600000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000bfbf2bc13f2bfa1d4ef3c697d02a7eda021861a8";

        bytes memory transferAttestation =
            hex"3616beea798149ee1e7e50bbe42dc6cf975157e46710cab317e7d673e9c5116f7f2143a2995e8ebd520ebe268f744b13f1b208dced8f398f974f46d42a6986001c49dcee6e8b257f8e30c75ffe78c2fade8b065d410f82dc9168c1bcf1a924170b5a7f85662e137aaf1aa415fe4d23c0e8ea0c5855d572cac7d3b5a82e997216051c";

        ICCTPRelayer.ReceiveCall memory transferCall =
            ICCTPRelayer.ReceiveCall({message: transferMessage, attestation: transferAttestation});

        bytes memory swapMessage =
            hex"000000000000000100000003000000000001fc6a000000000000000000000000bfbf2bc13f2bfa1d4ef3c697d02a7eda021861a8000000000000000000000000dc2f6bfebc730b71aa19fccd5990194b40fbceb6000000000000000000000000dc2f6bfebc730b71aa19fccd5990194b40fbceb600000000000000000000000000000000000000000000000000000000001e848000000000000000000000000056ca414d41cd3c1188a4939b0d56417da7bb6da2000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000056ca414d41cd3c1188a4939b0d56417da7bb6da200000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        bytes memory swapAttestation =
            hex"2c03c34725b95da00cbc71b7dc323c554c0ad14c9cb9ae77ecedf80661e2e10f5d2906fe3e000b937434c4d32387eaac4e0f80cfb7845a985bead037e32a96021c2307c57dbc7278d4155e883bcf14bfd65c7bbda0cf3ef480c9d39ebd4429e2f93074674917a24ffc2d56e8fde9c172305c5c03da1b8198edd5cd7c953a7e7f401c";

        ICCTPRelayer.ReceiveCall memory swapCall =
            ICCTPRelayer.ReceiveCall({message: swapMessage, attestation: swapAttestation});

        relayer.mintAndSwap(transferCall, swapCall);

        vm.stopBroadcast();
    }

    function _addressToBytes32(address addr) internal pure returns (bytes32) {
        return bytes32(uint256(uint160(addr)));
    }
}
